#!/bin/bash

# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #
# Create macOS Sonoma, Ventura, or Monterey Installer disk(s) on one USB flash drive
#
# Optional Arguments:
#   see -h
#
# VERSION: v 3.4
#
# History:
#   2024-01-20: v3.0 Created for tech test
#   2024-01-29: v3.4 Support multiple USB disks, add display_mode, exclude Installers DiskID,
#   2024-01-30: v3.5 Change to support target disk regex expression, like disk+, disk[0-9]$,
#               prompts format improvements; test using diskutil report: OS Can Be Installed
#   2024-04-01: able to assign specific volume
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #

# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #
#  The MIT License (MIT)
#  Copyright (c) Tony Liu 2024-
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #

LastDataVolume="uData"
PartitionSize=( "16G" "16G" "16G" )


# ----------------------------------------------------------------
# NO TOUCH BELOW
# ----------------------------------------------------------------

# ----------------------------------------
# Current System External Physical Disks
ExternalDiskNumber=0
declare -a SysDiskIDList SysDiskNameList SysDiskVolumeNumnerList
declare -a SysDiskVolumeIDList SysDiskVolumeNameList SysDiskVolumeTypeList

# ------------------------------
# Target External Physical Disks
declare -a TargetDiskIDList TargetDiskNameList TargetDiskVolumeNumnerList
declare -a TargetDiskVolumeIDList TargetDiskVolumeNameList TargetDiskVolumeTypeList

# -------------------------------
# User Target Disk lists or ALL
declare -a TargetInstallerDiskList
NumberPartition=0
EraseExternalDisk=false

# ------------------
# Partition Related
declare -a PartitionCode PartitionCommandLineOption

# --------------------------------------------
# User defined Installers and it's DiskID List
# InstallAppsTotal=3
declare -a InstallerAppFQP InstallerDiskIDList

# -----------------------------
# User defined backup folder
declare -a BackupVolumes BackupMountPoints
Path2Copy=""


# --------------------------------------------------------------------
# getVolumeNamebyDiskID()
# ---------------------------
# Get a volume name of a DiskID
# Inputs:
#   $1    disk ID
# Return: string of Volume Name of a disk id.
# --------------------------------------------------------------------
getVolumeNamebyDiskID() { /usr/sbin/diskutil info "$1" | /usr/bin/awk -F":" '/Volume Name/ {$1=""; print $0}' | xargs; };
# --------------------------------------------------------------------
# geDiskIDbyVolumeName()
# ---------------------------
# Get DiskID of a volume(name) from USB disk 
# Inputs:
#   $1    volume name
# Return: string of partition disk id. i.e. /dev/disk4s3
# --------------------------------------------------------------------
geDiskIDbyVolumeName() { /usr/sbin/diskutil list external physical | /usr/bin/awk -v pat="$1" '$0 ~ pat { print $NF }'; };
# --------------------------------------------------------------------
# getMountPointbyDiskID()
# ---------------------------
# Get mount point from deviceID
# Input:
#    $1      Volume's deviceID
# Return:
#    string of the mount point(path)
# --------------------------------------------------------------------
getMountPointbyDiskID() { /usr/sbin/diskutil info "$1" | /usr/bin/awk -F ':' '/Mount Point/ {$1=""; print $0 }' | xargs; };

# --------------------------------------------------------------------
# isOSVolume()
# ---------------------------
# Get if the volume is OS Can Be Installed
# Input:
#    $1      Volume's deviceID
# Return:
#    string of the mount point(path)
# --------------------------------------------------------------------
isOSVolume() { /usr/sbin/diskutil info "$1" | /usr/bin/awk -F ':' '/OS Can Be Installed/ {$1=""; print $0 }' | xargs; };

# --------------------------------------------------------------------
# convertTimeElapsed()
# ---------------------------
# Convert seconds to Day:Hour:Minute:Second
# Input:
#   $1      the seconds
# Return:
#   string of __d:__h:__m:__s
# --------------------------------------------------------------------
convertTimeElapsed() {  printf '%dd:%02dh:%02dm:%02ds\n' $((${1}/86400)) $((${1}%86400/3600)) $((${1}%3600/60)) $((${1}%60)); }

# --------------------------------------------------------------------
# showHELP()
# ----------
# get installer app full name via its FQP
# Input:
#   $1      absolute path of Installer app itself
# Return: .app Installer name
# --------------------------------------------------------------------
showHELP()
{
    local scriptName="$1"
    local LastDataVolume="$2"
    # /usr/bin/clear
    /bin/cat << EOF
Create macOS Sonoma, Ventura and Monterey Installer USB disk(s)

Usage:  $scriptName [options]
    -h                show this help
    -p NUMBER         (Action), erase and repartition target USB disk(s) 
                      NUMBER of Installer volume(s), valid number: 1, 2, or 3
                      The rest spaces volume will be named "$LastDataVolume"
                      Each Installer partition size is 16GB by default
    -0 INSTALLER      (Action), create macOS INSTALLER to the 1st volume
    -1 INSTALLER      (Action), create macOS INSTALLER to the 2nd volume
    -2 INSTALLER      (Action), create macOS INSTALLER to the 3rd volume
    -d diskID         Assign target USB disk's diskID. The above actions
                      will be applied to this USB disk. macOS disk IDs 
                      is start with "disk" and followed by digit numbers.
                      Multiple -d options is supported if needed
                          e.g. "-d disk4 -d disk6"
                      Regex is supported, like
                         "-d disk+", all USB disks will match
                         "-d disk[3-9]$" = only disk3 disk4 ... disk9
                      INSTALLER's diskID(s) is excluded from target disk
                      list, even if it's explicitly assigned by -d option.
    -c PATH           Copy files in PATH to the "$LastDataVolume" volume

    Launch with no option, displays current system attached USB disk(s) info

Comments:
   0. For CTS tech use only, 64GB or more USB disk storage capacity only
   1. Backup your  USB disk(s)' data before repartition action
   2. Restart your Mac one time if desired
   3. Disconnect all USB disks before starts, then connect USB disk(s)
   4. Run this script as root, i.e. sudo $scriptName
   5. "Tools" folder in the same folder of this script is copied to the last
      volume of each target USB disk(s)

Version 3.5 | 2024-01 | Tony Liu | The MIT License (MIT)
EOF
}


# --------------------------------------------------------------------
# ejectInstallerDiskImages()
# ---------------------------
# Eject all mounted Disk Images that used by macOS Installer
# Call the function when all Installers are done
# Input: N/A
# Return: N/A
# --------------------------------------------------------------------
ejectInstallerDiskImages()
{
   while read -r line; do
      [ -n "$line" ] && /usr/sbin/diskutil unmountDisk force "$line" &>/dev/null
      [ -n "$line" ] && /usr/sbin/diskutil eject "$line" &>/dev/null
   done < <(/usr/sbin/diskutil list | /usr/bin/awk '/Apple_HFS Shared Support/{ print $NF }')
}

# --------------------------------------------------------------------
# createInstallerVolume()
# -------------------
# Run createinstallmedia command to make installer volume on target
# Try up to 3 times, wait 1o seconds each try, if failed
# Input:
#   $1      target volume Disk ID (/dev/disk4)
#   #2      Installer's with full path
# Return: N/A
# --------------------------------------------------------------------
createInstallerVolume()
{
   diskID="$1"
   installerFullPath="$2"
    if [ -n "$diskID" ]; then
        macVol="$(getMountPointbyDiskID "$diskID")"
        echo -e " - Creating $(basename "$installerFullPath") on volume [$macVol]-[$diskID]..."
        maxStep=2; tryagain=0;
        while ! "${installerFullPath}/Contents/Resources/createinstallmedia" --volume "$macVol" --nointeraction 2>&1 | sed 's/^/      /'; do
            [ "$tryagain" -ge "$maxStep" ] && break;
            ((tryagain++))
            sleep $((10*tryagain))
        done
        if [ "$tryagain" -ge "$maxStep" ]; then
            echo " ! Warning: install media was created failed..."
        fi
    fi
}

# --------------------------------------------------------------------
# renameInstallerVolumeVersion()
# -------------------------------
# Rename an Installer volume with Installer version
# Input:
#   $1      Installer app itself
#   #2      Target volume diskID
# Return: N/A
# --------------------------------------------------------------------
renameInstallerVolumeVersion()
{
   local diskID="$1"
   local appName="$2"

    if [ -n "$diskID" ]; then
        osVol=$(getMountPointbyDiskID "$diskID")
        if [ -f "${osVol}/System/Library/CoreServices/SystemVersion.plist" ]; then
            osVersion="$(defaults read "${osVol}/System/Library/CoreServices/SystemVersion.plist" ProductVersion | xargs)"
        else
            osVersion="$(defaults read "${osVol}/${appName}/Contents/Info.plist" DTPlatformVersion | xargs)"
            echo " ! Warning: the destination volume [diskid=$diskID, vol=$osVol] does not seem a valid macOS installation volume..."
        fi
        volName=$(getVolumeNamebyDiskID "$diskID")
        /usr/sbin/diskutil rename "$diskID" "${volName} ${osVersion}" &>/dev/null
    fi
}
# --------------------------------------------------------------------
# createAllInstallers()
# -------------------------------
# create all installer on all Installer Volumes on all USB disks
# Input: N/A
# Return: N/A
# --------------------------------------------------------------------
createAllInstallers()
{
    local i=0; local j=0; local k=0
    for k in 0 1 2; do
        if [ -n "${InstallerAppFQP[k]}" ]; then
        # for each installer
            for (( i=0; i<ExternalDiskNumber; i++)); do
                # for each target DiskID
                if [ -n "${TargetDiskIDList[i]}" ]; then
                    # for each target DiskID's volume if exists.
                    if [ -n "${TargetDiskVolumeIDList[${i}${k}]}" ]; then
                        sleep 5
                        FDDiskID="${TargetDiskVolumeIDList[${i}${k}]}"
                        createInstallerVolume "$FDDiskID" "${InstallerAppFQP[k]}"
                        renameInstallerVolumeVersion "$FDDiskID" "${InstallerAppFQP[k]}"
                    fi
                fi
            done
        fi
    done
}


# --------------------------------------------------------------------
# showInstallersToVolumes()
# -------------------------------
# get external USB disk info
# Input: N/A
# Return: N/A
# --------------------------------------------------------------------
showInstallersToVolumes()
{
    echo -e "\nInstaller(s) will be created on target USB disk(s)'s volume(s):"
    for i in 0 1 2; do
        if [ -n "${InstallerAppFQP[i]}" ]; then
            echo "   Create <$(basename "${InstallerAppFQP[i]}")> => Volume<$i>"
        fi
    done
}


# --------------------------------------------------------------------
# getLastVolofTargetDisks()
# ---------------------------
# Get the last volume of each Target Disk and save to BackupVolumes
# and BackupMountPoints
# Input: N/A
# Return: N/A
# Global Variables:
#    ExternalDiskNumber: read
#    TargetDiskIDList: read
#    BackupVolumes: create/update
#    BackupMountPoints: create/update
# --------------------------------------------------------------------
getLastVolofTargetDisks()
{
    if [ "$ExternalDiskNumber" -gt 0 ]; then
        local i=0; local j=0
#        echo -e "\n    - Getting the last volume of each target disk:"
        for (( i=0; i<ExternalDiskNumber; i++)); do
            BackupVolumes[i]=""
            BackupMountPoints[i]=""
            if [ -n "${TargetDiskIDList[i]}" ]; then
                BackupVolumes[i]="$(/usr/sbin/diskutil list "${TargetDiskIDList[i]}" | /usr/bin/awk -v pat="${TargetDiskIDList[i]}s" '$0 ~ pat {print $NF}' | tail -1)"
                if /usr/sbin/diskutil mount "${BackupVolumes[i]}" 2>&1 | sed 's/^/      /'; then
                    BackupMountPoints[i]="$(getMountPointbyDiskID "${BackupVolumes[i]}")"
                else
                    echo " ! warning: mounting the last volume ${BackupVolumes[i]} failed, backup folder wont be copied to it."
                fi

            fi
        done
    fi
}

# --------------------------------------------------------------------
# copy2LastVolofTargetDisks()
# ---------------------------
# Copy default Tools and user defined backup folders to the last volume(s)
# of each Target Disk
# Input: N/A
# Return: N/A
# Global Variables:
#    ExternalDiskNumber: read
#    TargetDiskIDList: read
#    BackupMountPoints: read
# --------------------------------------------------------------------
copy2LastVolofTargetDisks()
{
    if [ "$ExternalDiskNumber" -gt 0 ]; then
        local i=0; local j=0
        for (( i=0; i<ExternalDiskNumber; i++)); do
            echo -e " - Copying to [${BackupMountPoints[i]}]:"
            if [ -n "${BackupMountPoints[i]}" ]; then
        		[ -d "$Path2Copy" ] && cp -a "$Path2Copy" "${BackupMountPoints[i]}/" &>/dev/null
                [ -d "$ScriptRootPath/Tools" ] && cp -a "$ScriptRootPath"/Tools "${BackupMountPoints[i]}/" &>/dev/null
        		cp -a "$0" "${BackupMountPoints[i]}/" &>/dev/null
            fi
        done
    fi
}


# ####################################################################
# ALL External Physical Disk functions
# ####################################################################
# ---------------------------------------------------------------------------
# set_Sys_ExternalDiskIDList()
# ------------------------------------
# Collect all System external physical disk and its volumes attached to system
# Input: N/A
# Return: N/A
#
# Global Variables:
#    Write / Initialize
#        ExternalDiskNumber, SysDiskIDList, SysDiskNameList
#        SysDiskVolumeTypeList, SysDiskVolumeIDList
#        SysDiskVolumeNameList, SysDiskVolumeNumnerList
# ---------------------------------------------------------------------------
set_Sys_ExternalDiskIDList()
{
    if [ -z "$(/usr/sbin/diskutil list external physical)" ]; then
        echo "Error: No External USB disk is found."; exit 1;
    fi
    local i=0
#    local isTarget=""
    while read -r line; do
        SysDiskIDList[i]="${line#"/dev/"}"
        SysDiskNameList[i]=$(/usr/sbin/diskutil info "$line" | /usr/bin/awk -F":" '/Media Name:/ {$1=""; print $0}' | xargs)
#        isTarget=""
#        [[ ${TargetInstallerDiskList[*]} =~ ALL ]] && isTarget="Yes"
#        [[ ${TargetInstallerDiskList[*]} =~ ${SysDiskIDList[i]} ]] && isTarget="Yes"
#        if [ "$isTarget" = "Yes" ]; then
#            TargetDiskIDList[i]="${SysDiskIDList[i]}"
#            TargetDiskNameList[i]="${SysDiskNameList[i]}"
#        fi
        local j=0
        local volType
        while read -r row; do
            volType="$(/usr/sbin/diskutil info "$row" | /usr/bin/awk -F":" '/Partition Type:/ {$1=""; print $0}' | xargs | /usr/bin/tr '[:lower:]' '[:upper:]')"
            # Only "OS Can Be Installed" Volume are considered
#           if [ "$volType" != "EFI" ]; then
            # echo " ----- $row = Volume $(isOSVolume "$row") ------"
            if [[ $(isOSVolume "$row") =~ [yY][eE][sS] ]]; then
                SysDiskVolumeTypeList[${i}${j}]="$volType"
                SysDiskVolumeIDList[${i}${j}]="$row"
                SysDiskVolumeNameList[${i}${j}]=$(/usr/sbin/diskutil info "$row" | /usr/bin/awk -F':' '/Volume Name/ {$1=""; print $0}' | xargs)
#                if [ "$isTarget" = "Yes" ]; then
#                    TargetDiskVolumeTypeList[${i}${j}]="${SysDiskVolumeTypeList[${i}${j}]}"
#                    TargetDiskVolumeIDList[${i}${j}]="${SysDiskVolumeIDList[${i}${j}]}"
#                    TargetDiskVolumeNameList[${i}${j}]="${SysDiskVolumeNameList[${i}${j}]}"
#                fi
                ((j++))
            fi
        done < <(/usr/sbin/diskutil list "${SysDiskIDList[i]}" | /usr/bin/awk -v pat="${SysDiskIDList[i]}s" '$0 ~ pat {print $NF}')
        SysDiskVolumeNumnerList[i]=$j
        TargetDiskVolumeNumnerList[i]=$j
        ((i++))
    done < <(/usr/sbin/diskutil list external physical | /usr/bin/awk '/(external, physical)/ {print $1}')
    ExternalDiskNumber=$i
}

# ---------------------------------------------------------------------------
# isTargetDiskID()
# ------------------------------
# Test if the given diskID is on the user defined Disk list, TargetInstallerDiskList 
# Input:
#   $1      the given diskID
# Return:
#   diskID     if found
#   NULL       none found
#
# Global Variables:
#    Read: TargetInstallerDiskList
# ---------------------------------------------------------------------------
isTargetDiskID()
{
    local diskID="$1"
    for eachTargetInput in "${TargetInstallerDiskList[*]}"; do
        if [[ $diskID =~ $eachTargetInput ]]; then
            echo $diskID
            return
        fi
    done
}

# --------------------------------------------------------------------
# set_Target_ExternalDiskIDList()
# ------------------------------
# According to the user defined list of Target disk to set which of current
# system recognized disk should be marked as Target
# Support regex, like disk*, disk+, disk?
# Input:  N/A
# Return: N/A
#
# Global Variables:
#    Write / Initialize
#        TargetDiskIDList, TargetDiskNameList, 
#        TargetDiskVolumeTypeList, TargetDiskVolumeIDList
#        TargetDiskVolumeNameList
#    Read:
#        ExternalDiskNumber, SysDiskIDList, SysDiskNameList
#        SysDiskVolumeTypeList, SysDiskVolumeIDList
#        SysDiskVolumeNameList, SysDiskVolumeNumnerList
# --------------------------------------------------------------------
set_Target_ExternalDiskIDList()
{ 
    if [ "$ExternalDiskNumber" -gt 0 ]; then
        local i j
        for (( i=0; i<ExternalDiskNumber; i++)); do
            TargetDiskIDList[i]="$(isTargetDiskID "${SysDiskIDList[i]}")"
            if [ -n "${TargetDiskIDList[i]}" ]; then
                TargetDiskNameList[i]="${SysDiskNameList[i]}"
                local j=0
                for (( j=0; j<SysDiskVolumeNumnerList[i]; j++ )); do
                    TargetDiskVolumeTypeList[${i}${j}]="${SysDiskVolumeTypeList[${i}${j}]}"
                    TargetDiskVolumeIDList[${i}${j}]="${SysDiskVolumeIDList[${i}${j}]}"
                    TargetDiskVolumeNameList[${i}${j}]="${SysDiskVolumeNameList[${i}${j}]}"
                done
                TargetDiskVolumeNumnerList[i]=$j
            fi
        done
    fi
}

# --------------------------------------------------------------------
# showAllSysDiskIDList()
# ------------------------------
# Display all Target External USB disk(s) and their volumes
# Input:
#   $1      Action:
#                EJECT = Eject after unmounted
#              REMOUNT = Remount all volumes after unmounted
#                   "" = unmount only
# Return: N/A
# --------------------------------------------------------------------
showAllSysDiskIDList()
{
    if [ "$ExternalDiskNumber" -gt 0 ]; then
        echo "================================================================================"
        local i=0; local j=0
        echo "Total ($ExternalDiskNumber) External USB disk(s) recognized by system:"
        for (( i=0; i<ExternalDiskNumber; i++)); do
            echo "  * Disk:$i, ID=[${SysDiskIDList[i]}], Name=[${SysDiskNameList[i]}], has ${SysDiskVolumeNumnerList[i]} volumes"
            local j=0
            for (( j=0; j<TargetDiskVolumeNumnerList[i]; j++ )); do
            echo "      ├─ Volume<$j>: ID:[${SysDiskVolumeIDList[${i}${j}]}], Type:[${SysDiskVolumeTypeList[${i}${j}]}], Name:[${SysDiskVolumeNameList[${i}${j}]}]"
            done
        done
        echo "================================================================================"
    else
        echo -e "   No External Pyhsical disk is found."
    fi
}

# --------------------------------------------------------------------
# showTargetDiskIDList()
# ------------------------------
# Display all Target External USB disk(s) and their volumes
# Input:
#   $1      Action:
#                EJECT = Eject after unmounted
#              REMOUNT = Remount all volumes after unmounted
#                   "" = unmount only
# Return: N/A
# --------------------------------------------------------------------
showTargetDiskIDList()
{
    if [ "$ExternalDiskNumber" -gt 0 ]; then
        local i=0; local j=0
        echo -e "\nTargeted External USB disk(s):"
        for (( i=0; i<ExternalDiskNumber; i++)); do
            if [ -n "${TargetDiskIDList[i]}" ]; then
                echo "   ----------------------------------------------------------------------"
                echo "   √ Disk:$i, ID=[${TargetDiskIDList[i]}], Name=<${TargetDiskNameList[i]}>, has ${TargetDiskVolumeNumnerList[i]} Installer volumes"
                local j=0
                for (( j=0; j<TargetDiskVolumeNumnerList[i]; j++ )); do
                    echo "       ├─ Volume<$j>: ID:[${TargetDiskVolumeIDList[${i}${j}]}], Type:[${TargetDiskVolumeTypeList[${i}${j}]}], Name:[${TargetDiskVolumeNameList[${i}${j}]}]"
                done
            fi
        done
        echo "   ----------------------------------------------------------------------"
    else
        echo -e "   No External Pyhsical disk is found."
    fi
}



# --------------------------------------------------------------------
# remountTargetDiskVolumes()
# ------------------------------------
# Eject/Remount all volumes on Target external USB disk
# Input:
#   $1      Action:
#                EJECT = Eject after unmounted
#              REMOUNT = Remount all volumes after unmounted
#                   "" = unmount only
# Return: N/A
# --------------------------------------------------------------------
remountTargetDiskVolumes()
{
    local ejectAll="$1"
    if [ "$ExternalDiskNumber" -gt 0 ]; then
#        echo -e "\n - Remount all Target External disks to get ready..."
        local i=0; local j=0
        for (( i=0; i<ExternalDiskNumber; i++)); do
            local j=0
            maxStep=2; tryagain=0;
            if [ -n "${TargetDiskIDList[i]}" ]; then
                while ! /usr/sbin/diskutil unmountDisk force "${TargetDiskIDList[i]}" 2>&1 | sed 's/^/      /'; do
                    [ "$tryagain" -ge "$maxStep" ] && break;
                    if [ "$tryagain" -eq 0 ]; then
                        echo " - Warning: it needs more time to unmount disk (ID=${TargetDiskIDList[i]}, name=${TargetDiskNameList[i]}). Try to check if it is being used by any program."
                    fi
                    ((tryagain++))
                    sleep $((10*tryagain))
                done
                sleep 10
                [ "$ejectAll" = "REMOUNT" ] && /usr/sbin/diskutil mountDisk "${TargetDiskIDList[i]}" 2>&1 | sed 's/^/      /'
                [ "$ejectAll" = "EJECT" ] && /usr/sbin/diskutil eject "${TargetDiskIDList[i]}" &>/dev/null
            fi
        done
    fi
}



# ####################################################################
# ALL Partition Related
# ####################################################################
# --------------------------------------------------------------------
# getPartitionLineOption()
# ------------------
# Set repartition command line options
# Input: N/A
# Return: N/A
# --------------------------------------------------------------------
getPartitionLineOption()
{
    local i j
    if [ "$NumberPartition" -gt 0 ]; then
        for (( i=0; i<ExternalDiskNumber; i++)); do
            if [ -n "${TargetDiskIDList[i]}" ]; then
                for (( j=0; j<NumberPartition; j++ )); do
                    PartitionCode[${i}${j}]="JHFS+ macOSInstaller_${TargetDiskIDList[i]}v$((1+j)) ${PartitionSize[i]}"
                    PartitionCommandLineOption[i]="${PartitionCommandLineOption[i]} ${PartitionCode[${i}${j}]}"
                done
                PartitionCode[${i}${j}]="JHFS+ $LastDataVolume 0"
                PartitionCommandLineOption[i]="${PartitionCommandLineOption[i]} ${PartitionCode[${i}${j}]}"
            fi
        done
        ((NumberPartition++))
    fi
}

# --------------------------------------------------------------------
# showPartitionStringInfo()
# -------------------
# Show how the external disk will be repartitioned
# Input: N/A
# Return: N/A
# --------------------------------------------------------------------
showPartitionStringInfo()
{
    if [ "$NumberPartition" -gt 0 ]; then
    /bin/cat << EOF

************ ALERT *********** ALERT *********** ALERT *************
** Your external USB disk will be erased, back up before continue **
********************************************************************
EOF
        echo -e "\nThe external USB disk(s) will be erased and partitioned:"
        local i j
        for (( i=0; i<ExternalDiskNumber; i++)); do
            if [ -n "${TargetDiskIDList[i]}" ]; then
                echo "   ------------------------------------------------------------"
                echo "   √ Disk:$i, ID=[${TargetDiskIDList[i]}], Name=<${TargetDiskNameList[i]}>"
                for (( j=0; j<NumberPartition; j++ )); do
                    echo "       ├─ Partition[$j] = [ ${PartitionCode[${i}${j}]} ]"
                done
            fi
        done
        echo "   ------------------------------------------------------------"
    else
        echo "   None of external USB disk(s) will be erased or repartitioned."
    fi
}

# --------------------------------------------------------------------
# partitionAllExternalDisk: Show how the external disk will be repartitioned
# Input: N/A
# Return: N/A
# --------------------------------------------------------------------
partitionAllExternalDisk()
{
    if [ "$NumberPartition" -gt 0 ]; then
        local i=0;
        for (( i=0; i<ExternalDiskNumber; i++)); do
            if [ -n "${TargetDiskIDList[i]}" ]; then
                echo -e " - Start to repartition external disk [${TargetDiskIDList[i]}]:"
                /usr/sbin/diskutil unmountDisk force "${TargetDiskIDList[i]}" &>/dev/null
                eval "/usr/sbin/diskutil partitionDisk ${TargetDiskIDList[i]} $NumberPartition GPT ${PartitionCommandLineOption[i]} 2>&1 | sed 's/^/      /'"
            fi
        done
    fi
}


# --------------------------------------------------------------------
# getInstallersDiskID()
# ----------------------
# Get Disk_ID where an full path of installer is from/on
# Input: N/A
# Return: N/A
# --------------------------------------------------------------------
getInstallersDiskID()
{
    installerApp="$1"
    local thepath
    thepath="$(dirname "$installerApp")/"
    local mountPoint="/"

    while read -r line; do
        mountPoint="$(echo "$line" | xargs)"
        if [[ "$thepath" == "${mountPoint}/"* ]]; then
            # Find the mount point
            mountDiskID="$(df -l | awk -v pat="$mountPoint" '$0 ~ pat { print $1 }')"
            mountDiskID="${mountDiskID#"/dev/"}"
            echo "$mountDiskID" | sed -E "s/s[0-9]+//p"
        fi
    done < <(df -l | awk -F"%" '/dev/ {print $3}')
}

# --------------------------------------------------------------------
# getAllInstallerDiskID()
# ------------------------
# Get Disk_ID of ALL installers where they are from and save to InstallerDiskIDList
# Input: N/A
# Return: N/A
# --------------------------------------------------------------------
getAllInstallerDiskID()
{
    for i in 0 1 2; do
        if [ -n "${InstallerAppFQP[i]}" ]; then
            InstallerDiskIDList[i]="$(getInstallersDiskID "${InstallerAppFQP[i]}")"
#            echo "     --${InstallerDiskIDList[i]} <=> ${InstallerAppFQP[i]} --"
        fi
    done
}


# --------------------------------------------------------------------
# ExcludeInstallerDisks()
# ------------------------
# All disk(s) that installer on are excluded from target disk list
# Input: N/A
# Return: N/A
# --------------------------------------------------------------------
ExcludeInstallerDisks()
{
    local silcene="$1"
    if [ "$ExternalDiskNumber" -gt 0 ]; then
        local i=0; local j=0; local hasone=""
        [ -z "$silcene" ] && echo -e "\nExclude External USB disk(s) where Installers are from/on:"
        for (( i=0; i<ExternalDiskNumber; i++)); do
            if [ -n "${TargetDiskIDList[i]}" ]; then
                if [[ ${InstallerDiskIDList[*]} =~ ${TargetDiskIDList[i]} ]]; then
                    TargetDiskIDList[i]=""
                    [ -z "$silcene" ] && echo "   Exclude: Disk:$i, ID=[${SysDiskIDList[i]}], Name=<${SysDiskNameList[i]}>"
                    hasone="yes"
                fi
            fi
        done
        [ -z "$hasone" ] && echo "   None External USB disk(s) is excluded."
        [ -z "$silcene" ] && echo -e "   ----------------------------------------------------------------------"
    fi
}


#-----------------------------------------------------------
#-----------------------------------------------------------
# main()
#-----------------------------------------------------------
ScriptRootPath="$(dirname "$0")"
ScriptName="$(basename "$0")"
# Parse command line arguments
NumberPartition=0
ViewMode="Yes"
while getopts "hvp:0:1:2:c:d:" opt; do
    case $opt in
        h)
            showHELP "$ScriptName" "$LastDataVolume"
            ViewMode="no"
            exit 0
            ;;
        p)
            ViewMode="no"
            EraseExternalDisk=true
            NumberPartition=$OPTARG
            ;;
        0)
            ViewMode="no"
            InstallerAppFQP[0]="$OPTARG"
            ;;
        1)
            ViewMode="no"
            InstallerAppFQP[1]="$OPTARG"
            ;;
        2)
            ViewMode="no"
            InstallerAppFQP[2]="$OPTARG"
            ;;
        c)
            ViewMode="no"
            Path2Copy="$OPTARG"
            ;;
        d)
            ViewMode="no"
            TargetInstallerDiskList+=( "$OPTARG" )
            ;;
        v)
            set_Sys_ExternalDiskIDList
            showAllSysDiskIDList
            exit 0
            ;;
        *) 
            showHELP "$ScriptName" "$LastDataVolume"
            exit 1
            ;;
    esac
done
if [ "$EraseExternalDisk" = true ] && [ "$NumberPartition" -eq "0" ]; then
    echo -e "Error: set number of partition(s) with -p.\n$ScriptName -h for more details"
    exit 0
fi

[ "$NumberPartition" -gt 3 ] && NumberPartition=3

# 1. Clear all other Installers "Support "
ejectInstallerDiskImages
set_Sys_ExternalDiskIDList
set_Target_ExternalDiskIDList
getAllInstallerDiskID
ExcludeInstallerDisks
getPartitionLineOption
showAllSysDiskIDList
showTargetDiskIDList
showInstallersToVolumes
showPartitionStringInfo
echo ""
# Display mode
[ "$ViewMode" = "Yes" ] && exit 0
read -r -p "--- Are you sure to continue? [y/n] " response
case "$response" in
    [yY][eE][sS]|[yY])
        
        if [ "$EUID" -ne 0 ]; then echo "Please run <$ScriptName> as root."; exit 2; fi

        echo -e "\n - Start time: $(/bin/date '+%Y-%m-%d %H:%M:%S')"
        TotalSeconds=0
        SECONDS=0
        partitionAllExternalDisk
        set_Sys_ExternalDiskIDList
        set_Target_ExternalDiskIDList
        ExcludeInstallerDisks "slience"
        timeElapsed=$(convertTimeElapsed "$SECONDS")
        TotalSeconds=$((TotalSeconds+SECONDS))
        echo " - Erase & Partition time used: $timeElapsed"
        # disableSportlight

        # Remount to specific mount point
		echo -e " - Remount All target disk volume(s)."
        SECONDS=0
        remountTargetDiskVolumes "REMOUNT"
        timeElapsed=$(convertTimeElapsed "$SECONDS")
        TotalSeconds=$((TotalSeconds+SECONDS))
        echo " - Remount time used: $timeElapsed"

        # start to create installer disk
        SECONDS=0
        createAllInstallers
        timeElapsed=$(convertTimeElapsed "$SECONDS")
        TotalSeconds=$((TotalSeconds+SECONDS))
        echo " - Create Installer volumes time used: $timeElapsed"

		# Copy -c and Tools folder to uData volume
        YourFolderData=""
        [ -d "$Path2Copy" ] && YourFolderData="and your <$Path2Copy> "
		echo -e " - copying Tools folder ${YourFolderData}to the last volume of each target disk..."
        SECONDS=0
        getLastVolofTargetDisks
        copy2LastVolofTargetDisks
        timeElapsed=$(convertTimeElapsed "$SECONDS")
        TotalSeconds=$((TotalSeconds+SECONDS))
        echo " - Folder copy/backup time used: $timeElapsed"

		# Cleanup
		echo -e " - Ejecting USB disk..."
		ejectInstallerDiskImages
		echo -e " - ALL done! Your USB disk could be safely detached from this Mac."
        timeElapsed=$(convertTimeElapsed "$TotalSeconds")
        echo -e " - TOTAL time used: $timeElapsed"
		echo -e " - Complete time: $(/bin/date '+%Y-%m-%d %H:%M:%S')";

        # Reload all to show
        set_Sys_ExternalDiskIDList
        showAllSysDiskIDList
        remountTargetDiskVolumes ""
        say "All done"
        # remountTargetDiskVolumes "EJECT"
        ;;
    *)
        ;;
esac
exit 0
