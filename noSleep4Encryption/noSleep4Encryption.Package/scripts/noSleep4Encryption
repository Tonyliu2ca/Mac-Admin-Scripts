#!/bin/bash

# ------------------------------------------------------------------------------------
# noSleep4Encryption
#
# Purpose:
#    Prevent system from sleep or shutdown if the defined condition not satisfied.
#
# Process:
#    0. read system energy sleep settings, count the highest possible interval
#    1. During the initializing period:
#       create launchd plist file, copy self to destination and launch it, then quit.
#    2. System launchd will invoke this daemon script upon the interval reached.
#    3. everytime it's launched, it does step 0 and 1, then call noSleep to prevent system
#       going to sleep.
#    4. If system sleep is changed, it update launch daemons interval accordingly.
#    5. Check if can not Stop, quit with nothing changed.
#    5.1 Check if has a login user, bypass do nothing.
#    5.1.1 if no lgoin user, cleanup and restart.
#
# How to install:
#    if the launchdaemon plist file not exists, script installs itself.
#
# How to test:
#    Run the following commands:
#       Check if scheduled or repeat are all gone
#          pmset -g sched
#       Check if the daemon loaded
#          launchctl list | grep noSleep4Encryption
#       Check its log
#          cat /var/log/noSleep4Encryption.log
#          tail -n40 /var/log/tonyliu2ca.noSleep4Encryption.log
#       Launch it immediately & manually:
#          launchctl kickstart system/com.github.tonyliu2ca.noSleep4Encryption
#         or run the script
#          /usr/local/bin/noSleep4Encryption.sh
#       Read / check launchd settings:
#          defaults read /Library/LaunchDaemons/com.github.tonyliu2ca.noSleep4Encryption.plist
#
# History:
#   2017-10-23: more robust DDPE client program existence test to support new DDPE version.
#   2017-05-04: prototype, version 0.1
#   2017-05-10: version = 1.0
#   2017-06-01: Add %1 for initialize
#
# Author:
#   Tony Liu, TonyLiu2ca@yahoo.com
# ------------------------------------------------------------------------------------

# Initialize argument
iniString="INITIAL"
fullCLEANUP="FULLCLEANUP"

# Program name
program="noSleep4Encryption"
# The script file name
prgName="$program"
# The daemon identification string
identity="com.github.tonyliu2ca.$program"
# Log file name
logFile="/var/log/${program}.log"
# The daemon plist file fullpath
daemon="/Library/LaunchDaemons/$identity.plist"
# The fullpath of the script file
prgFullPath="/usr/local/bin/$prgName"
# The system default none stop delay
nonestopDelayDefault=300
nonestopDelay=300
# restart time with 24 hours number, 1 = 1:00AM
restartTime=1
# 
miniTimer=0


# reboot ok parameters
restartCron="/usr/lib/cron/tabs/root"
pathNeverSleep="/usr/local/bin/neverSleep"

# ----------------------------------------------------------------------------------------
# personal adding log function
# Return:
#    N/A
# ----------------------------------------------------------------------------------------
mylog()
{
   /bin/echo "$(date) : $1" >> "$logFile"
}

mylogprintf()
{
   /usr/bin/printf "%s\n" "$1" >> "$logFile"
}


# ----------------------------------------------------------------------------------------
# prevent system goes to sleep by emulate user active and cancel all repeat and schedules.
# Return:
#    N/A
#
# Launchd does not allow daemons to nohup or disown, so the following not working.
#      nohup caffeinate -imu -t $nonestopDelay &
#      nohup caffeinate -t $((nonestopDelay-30)) & disown
# ----------------------------------------------------------------------------------------
noSleep()
{
   mylog "noSleep: ..."
   /usr/bin/caffeinate -u -t1; /usr/bin/pmset repeat cancel; /usr/bin/pmset schedule cancelall
   pmsetStatus=$(pmset -g|sed 's/^/       /')
   mylog "noSleep: Power Management status:"
   mylogprintf "$pmsetStatus"
   mylog "noSleep: (sent user is active signal and cancel all repeat and schedules)"
}

# ----------------------------------------------------------------------------------------
# Self cleanup and restart the machine
# Return:
#    N/A
# ----------------------------------------------------------------------------------------
cleanup()
{
   mylog "cleanup: ..."
   /bin/rm -f "$daemon"
   mylog "cleanup: done, will restart..."
   /sbin/shutdown -r +1
   rm "$0"
}

# ----------------------------------------------------------------------------------------
# Test if a user logged in
# Return:
#    0: YES
#    1: No
# ----------------------------------------------------------------------------------------
ifLoginUser()
{
   mylog "ifLoginUser: ..."
   condition="N/A"; iReturn=0
   anyuser=$(/usr/bin/who)
   [ -n "$anyuser" ] && { condition="$anyuser"; iReturn=1; }
   mylog "ifLoginUser: $condition, $iReturn"; return $iReturn
}


# ----------------------------------------------------------------------------------------
# Test if it is after 2:00AM
# Return:
#    0: YES
#    1: NO
# ----------------------------------------------------------------------------------------
midRestart()
{
   condition="No"
   iReturn=1
   mylog "midRestart: ..."
   hour=$(/bin/date +"%H")
   (( hour < restartTime )) && { condition="Yes"; iReturn=0; }
   mylog "midRestart: $condition, $iReturn"; return $iReturn
}

# ----------------------------------------------------------------------------------------
# Test if can stop
# Return:
#    0: STOP
#    1: continue
# ----------------------------------------------------------------------------------------
canStop()
{
   mylog "canStop: ..."
   condition="No"; iReturn=1
   prefPaneName=$(ls -td /Library/PreferencePanes/Dell* 2>/dev/null | sed -n 1p)
   if [ -f "$prefPaneName/Contents/Helpers/client" ]; then 
      percentDone=$("$prefPaneName/Contents/Helpers/client" -d 2>&1 | grep PercentDone | awk '{ print $3}'  | head -n 1)
      mylog "canStop: percentDone=[$percentDone]"
      [[ "$percentDone" = "1;" ]] && { condition="Yes"; iReturn=0; }
   else
	   mylog "canStop: wait for DDPE to be installed..."
      condition="Non-DDPE"; iReturn=1;
   fi
   mylog "canStop: $condition, $iReturn"; return $iReturn
}

# ----------------------------------------------------------------------------------------
# computer the minimum delay time in seconds
# Return:
#    time in seconds
# ----------------------------------------------------------------------------------------
getMinimumTimer()
{
   mylog "getMinimumTimer: ..."
   timer=$(/usr/bin/pmset -g custom | /usr/bin/grep " sleep" | /usr/bin/awk '{print $2}'|/usr/bin/sort -n | head -n1)
   mylog "getMinimumTimer: = $timer (minutes)"
   for miniTimer in $timer; do
      (( miniTimer != 0 )) && break
   done
   miniTimer=$((miniTimer*60))
   mylog "getMinimumTimer: minimum time=$miniTimer (seconds)"
}

# ----------------------------------------------------------------------------------------
# Computer the none stop delay seconds
#
# set to 5 minutes.
# If the minimum delay seconds:
#   > 59: will start 20 seconds earlier.
#   else: mean system do no sleep, but we still check every hour, or any interval like.
#
# Return:
#    nonestopDeply in seconds
# ----------------------------------------------------------------------------------------
setTimer()
{
   mylog "setTimer: ..."
   getMinimumTimer
   mylog "setTimer: minimum sleep = $miniTimer"
   (( miniTimer < nonestopDelayDefault )) && nonestopDelay=$((miniTimer-20)) || nonestopDelay=$nonestopDelayDefault
   mylog "setTimer: nonestopDelay = $nonestopDelay"
}

# ----------------------------------------------------------------------------------------
# Update daemon internal if needed
#
# If the current deplay internal is different from plist one, update the plist file
#
# Return:
#    N/A
# ----------------------------------------------------------------------------------------
updateService()
{
   mylog "updateService: ..."
   if [ -f "$daemon" ]; then
      curTimer=$(/usr/bin/defaults read $daemon StartInterval)
      (( curTimer != nonestopDelay )) && /usr/bin/defaults write $daemon StartInterval $nonestopDelay
      mylog "updateService: updated from $curTimer to $nonestopDelay"
   fi
}

# ----------------------------------------------------------------------------------------
# Initiallizing process
#
# If the daemon plist file doesn't exist, it's no initialized, then
#   create the plist, copy scriptm and launch daemon
#
# Return:
#    0: initializing is done
#    1: bypass initializing
# ----------------------------------------------------------------------------------------
initialize()
{
   mylog "initialize: ..."
   if [ ! -f "$daemon" ]; then
      /bin/cat <<EOF >"$daemon"
<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE plist PUBLIC "-//Apple Computer//DTD PLIST 1.0//EN" "http://www.apple.com/DTDs/PropertyList-1.0.dtd">
<plist version="1.0">
<dict>
	<key>Label</key>
	<string>$identity</string>
	<key>ProgramArguments</key>
	<array>
		<string>/bin/bash</string>
		<string>$prgFullPath</string>
	</array>
	<key>RootDirectory</key>
	<string>/usr/local/bin</string>
	<key>RunAtLoad</key>
	<true/>
	<key>StandardErrorPath</key>
	<string>/dev/null</string>
	<key>StandardOutPath</key>
	<string>/dev/null</string>
	<key>StartInterval</key>
	<integer>$nonestopDelay</integer>
	<key>WorkingDirectory</key>
	<string>/usr/local/bin</string>
</dict>
</plist>
EOF
      /bin/cp -f "$0" "$prgFullPath"
      /usr/bin/nohup /usr/bin/caffeinate -ismu -w 1 </dev/null >/dev/null 2>&1 & disown
      /bin/chmod 755 "$prgFullPath"
      /bin/chmod 644 "$daemon"
      # launchctl kickstart system/$identity
      /bin/launchctl load "$daemon"
      /bin/sleep 2
      mylog "initialize: done"
      if [ "$0" != "$prgFullPath" ]; then /bin/rm "$0"; fi
      return 1
   else
      mylog "initialize: bypass"
      return 0
   fi
}

# ----------------------------------------------------------------------------------------
# lidCloseOK process
#
# It let the system up and running when it's on AC power, no matter if laptop lid is off.
#
# It utilize the cron reboot to create system assert whenever computer is rebooted.
# cron will run the neverSleep script when system is startup.
# the script will clean up itself once the noSleep4Encryption launchd plist is gone.
#
# Return:
#    0: is done
# ----------------------------------------------------------------------------------------
lidCloseOK()
{
   /bin/cat <<EEOOFF > "$restartCron"
# DO NOT EDIT THIS FILE - edit the master and reinstall.
# (/tmp/crontab.Ft6ZevY0wU installed on Fri Jun  2 09:39:15 2017)
# (Cron version -- FreeBSD: src/usr.sbin/cron/crontab/crontab.c,v 1.24 2006/09/03 17:52:19 ru Exp $)
@reboot	$pathNeverSleep
EEOOFF

   /bin/cat <<EEOOFF > "$pathNeverSleep"
#!/bin/bash
if [ ! -f "$daemon" ]; then
   rm -f "$restartCron" "$pathNeverSleep"
else
   /usr/bin/nohup /usr/bin/caffeinate -ismu -w 1 </dev/null >/dev/null 2>&1 & disown
fi
EEOOFF
   touch /etc/crontab
   chown root:wheel "$restartCron" "$pathNeverSleep"
   chmod 600 "/usr/lib/cron/tabs/root"
   chmod 755 "/usr/local/bin/neverSleep"
   return 0
}


# ----------------------------------------------------------------------------------------
# lidCloseOK process
#
# It let the system up and running when it's on AC power, no matter if laptop lid is off.
#
# It utilize the cron reboot to create system assert whenever computer is rebooted.
# cron will run the neverSleep script when system is startup.
# the script will clean up itself once the noSleep4Encryption launchd plist is gone.
#
# Return:
#    0: is done
# ----------------------------------------------------------------------------------------
fullCleanUp()
{
#   rm /usr/local/bin/neverSleep /usr/local/bin/noSleep4Encryption /Library/LaunchDaemons/com.github.tonyliu2ca.noSleep4Encryption.plist /var/log/noSleep4Encryption.log 
   rm -f "$pathNeverSleep" "$restartCron" "$prgFullPath" "$daemon"
#   rm -f "$logFile"
}



#------------
#|   main   |
#------------
if [ "$1" = "$fullCLEANUP" ]; then
	fullCleanUp
elif [ "$1" = "$iniString" ]; then 
   /bin/launchctl unload "$daemon"
   rm -f "$daemon" $logFile
   sleep 2
   lidCloseOK
   initialize
else
   if [ ! -f "$logFile" ]; then touch "$logFile"; fi
   mylog "----------------------------------"
   setTimer
   noSleep
   updateService
   if canStop; then
      if ifLoginUser; then
         mylog " . no login user."
         cleanup
      fi
      if midRestart; then
         mylog " . midRestart."
         cleanup
      fi
   fi
fi
